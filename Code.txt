#include <stdint.h>
#include "tm4c123gh6pm.h"
#include "FreeRTOS.h"
#include "task.h"
/*definitions to be used*/
#define TrainGateLED (1 << 1)    	// PF1
#define TrainSensor1 (1 << 4)    	// PF4
#define TrainSensor2 (1 << 0)   	// PF0
#define RED_VER (1 << 0)  			// PB0
#define GREEN_VER (1 << 1) 			// PB1
#define RED_HOR (1 << 2)   			// PB2
#define GREEN_HOR (1 << 3) 			// PB3
#define Button1 (1 << 4)      		// PB4
#define Button2 (1 << 5)      		// PB5
#define Button3 (1 << 6)      		// PB6
#define Button4 (1 << 7)      		// PB7

void PortB_Init(void) // this function is similar to one we used in semester 1
{
    SYSCTL_RCGCGPIO_R |= SYSCTL_RCGCGPIO_R1; // activate clock for port B
    GPIO_PORTB_LOCK_R = 0x4c4f434b; // to use the lock
    GPIO_PORTB_CR_R = 0XFF; // open the lock of the all pins
    GPIO_PORTB_DEN_R = 0XFF; // enable all pins
    GPIO_PORTB_PUR_R = 0xF0; // pull up resistors for the switches
    GPIO_PORTB_DIR_R = 0x0F; // make direction output in the LEDS pins and input in the buttons pins
}
void PortF_Init(void)
{
    SYSCTL_RCGCGPIO_R |= SYSCTL_RCGCGPIO_R5; // activate clock for port F
    GPIO_PORTF_LOCK_R = 0x4c4f434b; // to use the lock
    GPIO_PORTF_CR_R |= TrainGateLED | TrainSensor1 | TrainSensor2 ; // open the lock of the used pins
    GPIO_PORTF_DEN_R |= TrainGateLED | TrainSensor1 | TrainSensor2 ; // enable all the used pins
    GPIO_PORTF_PUR_R |= TrainSensor1 | TrainSensor2; // pull up resistors for the switches
	GPIO_PORTF_DIR_R |= TrainGateLED ; //make direction output in the red LED in the tiva
    GPIO_PORTF_DIR_R &= ~ TrainSensor1;//make direction input to switch one and two in this two lines (35,36)
		GPIO_PORTF_DIR_R &= ~TrainSensor2;
	
}
//times which is defined in the report 
const int fref = 1000; 
const int tgns = 10000; 
const int tgew = 5000; 
const int tsafety = 3000; 
const int tcross = 30000; 

int TrafficChecking = 1;

void NORMALMODETIMER(int count) //from semester one , one shot timer
{
    SYSCTL_RCGCTIMER_R |= (1 << 0);
    TIMER0_CTL_R = 0x0;                   
    TIMER0_CFG_R = 0x0;                   
    TIMER0_TAMR_R = 0x01;     
    TIMER0_TAILR_R = 16000 * count - 1; 
    TIMER0_CTL_R |= 0x01;                 
    while ((TIMER0_RIS_R & 0x1) == 0)
        ;
    TIMER0_ICR_R = 0x1;
}
void PEDESTRIANMODETIMER(int count)
{
    SYSCTL_RCGCTIMER_R |= (1 << 1);
    TIMER1_CTL_R = 0x0;                  
    TIMER1_CFG_R = 0x0;                  
    TIMER1_TAMR_R = 0x01;                                                       
    TIMER1_TAILR_R = 16000 * count - 1;                                     
    TIMER1_CTL_R |= 0x01;                 
    while ((TIMER1_RIS_R & 0x1) == 0)
        ;
    TIMER1_ICR_R = 0x1;
}
void TRAINMODETIMER(int count)
{
    SYSCTL_RCGCTIMER_R |= (1 << 2);
    TIMER2_CTL_R = 0x0;                   
    TIMER2_CFG_R = 0x0;                   
    TIMER2_TAMR_R = 0x01;                                                      
    TIMER2_TAILR_R = 16000 * count - 1;                                       
    TIMER2_CTL_R |= 0x01;                 
    while ((TIMER2_RIS_R & 0x1) == 0)
        ;
    TIMER2_ICR_R = 0x1;
}
//Define each task
static void NORMALMODE(void *pvParameters);
static void PEDESTRIANMODE(void *pvParameters);
static void TRAINMODE(void *pvParameters);
//Define Handler for each task except normal because we dont want it
xTaskHandle PEDESTRIANMODEHANDLER;
xTaskHandle TRAINMODEHANDLER;
int main(void)
{
    PortF_Init(); 
    PortB_Init();
    /*Creating the tasks*/
		xTaskCreate(NORMALMODE, (const portCHAR *)"Normal Task", configMINIMAL_STACK_SIZE, NULL, 1,NULL);
		xTaskCreate(PEDESTRIANMODE, (const portCHAR *)"Pedestrian Task", configMINIMAL_STACK_SIZE, NULL, 1, &PEDESTRIANMODEHANDLER);
    xTaskCreate(TRAINMODE, (const portCHAR *)"Train Task", configMINIMAL_STACK_SIZE, NULL, 1, &TRAINMODEHANDLER);
    /* Start the scheduler. */
    vTaskStartScheduler();
     // will not reach this point
    for (;;)
        ;
}
/*Normal Task*/
static void NORMALMODE(void *pvParameters)
{
    for(;;)
    {
        GPIO_PORTB_DATA_R &= ~RED_VER; // vertical road is open and allow cars to move(North,South)
        GPIO_PORTB_DATA_R |= GREEN_VER;
        TrafficChecking = 1;
        NORMALMODETIMER(tgns);
        GPIO_PORTB_DATA_R &= ~GREEN_VER; //vertical road is closed and disallow cars to move(North,South)
        GPIO_PORTB_DATA_R |= RED_VER;
        TrafficChecking = 0;
        NORMALMODETIMER(tsafety);
        GPIO_PORTB_DATA_R &= ~RED_HOR; //Horizontal road is open and allow cars to move(East,West)
        GPIO_PORTB_DATA_R |= GREEN_HOR;
        TrafficChecking = 1;
        NORMALMODETIMER(tgew);
        GPIO_PORTB_DATA_R &= ~GREEN_HOR;//Horizontal road is closed and disallow cars to move(East,West)
        GPIO_PORTB_DATA_R |= RED_HOR;
        TrafficChecking = 0;
        NORMALMODETIMER(tsafety);
    }
}

/*PedestrianTask*/
static void PEDESTRIANMODE(void *pvParameters)
{
    for(;;)
    {
        //Checking to the four Buttons
        if (!(GPIO_PORTB_DATA_R & Button1) || !(GPIO_PORTB_DATA_R & Button2) || !(GPIO_PORTB_DATA_R & Button3) || !(GPIO_PORTB_DATA_R & Button4))
        {
            //to avoid bouncing effec
            while (!(GPIO_PORTB_DATA_R & Button1) || !(GPIO_PORTB_DATA_R & Button2) || !(GPIO_PORTB_DATA_R & Button3) || !(GPIO_PORTB_DATA_R & Button4))
                ;
             //to check that normal mode is closed and no opened le    
           while (TrafficChecking == 1)
           ;
            vTaskPrioritySet(NULL, 2); //set the priority higher than tha normal mode
            vTaskPrioritySet(TRAINMODEHANDLER, 2); //also make train priority to can be accessed
            GPIO_PORTB_DATA_R |= RED_VER;
            GPIO_PORTB_DATA_R |= RED_HOR;
            PEDESTRIANMODETIMER(tcross);
            //return the 2 tasks to priority = 1 to be easily scheduled
            vTaskPrioritySet(TRAINMODEHANDLER, 1);
            vTaskPrioritySet(NULL, 1);
        }

    }
}
/*Traintask*/
static void TRAINMODE(void *pvParameters)
{
    for(;;)
    {
        if (!(GPIO_PORTF_DATA_R & TrainSensor1))
        {
            vTaskPrioritySet(NULL, 3); // make the train higher priority ever
            GPIO_PORTF_DATA_R |= TrainGateLED;
            GPIO_PORTB_DATA_R &= ~(GREEN_HOR | GREEN_VER);
            while (GPIO_PORTF_DATA_R & TrainSensor2) //if sensor 2 not pressed
            {
                GPIO_PORTB_DATA_R ^= (RED_HOR | RED_VER); // toggeling
               TRAINMODETIMER(fref);
            }
            while (!(GPIO_PORTF_DATA_R & TrainSensor2)) // if sensor 2 pressed
                ;
            GPIO_PORTF_DATA_R &= ~TrainGateLED;
						vTaskPrioritySet(PEDESTRIANMODEHANDLER, 1); //to make sure to return to the normal mode
            vTaskPrioritySet(NULL, 1); // return to the priority =1
						
        }
        else if (!(GPIO_PORTF_DATA_R & TrainSensor2)) // same as above with diferent order
        {
            vTaskPrioritySet(NULL, 3);
            GPIO_PORTF_DATA_R |= TrainGateLED;
            GPIO_PORTB_DATA_R &= ~(GREEN_HOR | GREEN_VER);
            while (GPIO_PORTF_DATA_R & TrainSensor1)
            {
                GPIO_PORTB_DATA_R ^= (RED_HOR | RED_VER);
                TRAINMODETIMER(fref);
            }
            while (!(GPIO_PORTF_DATA_R & TrainSensor1))
                ;
            GPIO_PORTF_DATA_R &= ~TrainGateLED;
						vTaskPrioritySet(PEDESTRIANMODEHANDLER, 1);
            vTaskPrioritySet(NULL, 1);
						
        }

    }
}